#!/usr/bin/env bash
#
# Usage: 
#   $(basename $0) apply <path> [-n] [-q]
#   $(basename $0) stat <path> [-i]
#   $(basename $0) list <path>
#   $(basename $0) check
#   $(basename $0) help | docs
#
# Commands:
#   apply            apply migrations
#   stat             view applied migrations (-i for unapplied)
#   list             list the migrations for a path
#   check            check the Postgress connection
#   help             this help message
#   docs             print manual and documentation
#
# Options:
#   -i               invert results (show unapplied migrations)
#   -n               dry run, do not really apply migrations
#   -q               quiet, no output
#
# Environment Variables
#   PGCLIENT         full path of Postgres
#   PGARGS           Postgres arguments
#

set -uo pipefail

VERSION=1.0

OK_MSG="\033[1;32m[OK]\033[0;0m"
ERROR_MSG="\033[1;31m[ERROR]\033[0;0m"
WARN_MSG="\033[1;33m[WARN]\033[0;0m"

PGCLIENT=${PGCLIENT:-$(which psql)}
PGARGS=${PGARGS:=}
PGNAME=$(basename "$PGCLIENT")

APPLY_NAME=apply.sql
TEST_NAME=test.sql
TEST_COLUMN="test"

usage() {
  tail +2 "$0" | while read -r line
    do 
      if ! [[ $line =~ ^# ]]; then break; fi 
    eval "echo \"$line\"" | sed 's/^#//' | sed 's/^ //'
    done 

  exit 0
}

docs() {
  local found=0
  cat "$0" | while read -r line
  do
    if [[ $found -eq 0 ]]; then
      if [[ "$line" != "# DOCS BEGIN" ]]; then
        continue
      else
        found=1
        continue
      fi
    fi

    eval "echo \"$line\"" | sed 's/^#//' | sed 's/^ //'
  done

  exit 0
}

error() {
  >&2 echo -e "$ERROR_MSG $1"
  exit 255
}

verb() {
  if [[ -z ${QUIET:-} ]]; then
    echo -e "$1"
  fi
}

check_path() {
  if [[ -z ${MIGRATIONS:-} ]]; then
    error "Please specify path to migrations"
  fi

  if [[ ! -d $MIGRATIONS ]]; then
    error "Invalid path: $MIGRATIONS"
  fi
}

sanity_check() {
  local quiet=${1:-}
  local conninfo

  if [[ -n $PGCLIENT ]] && [[ -x $PGCLIENT ]]; then
    [[ -z $quiet ]] && verb "$OK_MSG $PGNAME client found"
  else
    error "$PGNAME client not found"
  fi

  conninfo=$(echo "\\conninfo" | $PGCLIENT $PGARGS )
  if [[ -n $conninfo ]];
  then
    [[ -z ${quiet:-} ]] && verb "$OK_MSG connection successful\n$conninfo"
  else
    error "Can't connect to database"
  fi
}

# Test the outcome of a result
test_sql() {
  local fn=$1
  local res
  local col
  local val

  res=$($PGCLIENT $PGARGS -xA < "$fn")
  [[ -z $res ]] && error "No result: $fn"

  col=$(echo "$res" | cut -d '|' -f 1)
  val=$(echo "$res" | cut -d '|' -f 2)

  if [[ $col != "$TEST_COLUMN" ]]; then
    error "No '$TEST_COLUMN' column: $fn"
  fi

  if [[ -z $val ]] || [[ "$val" != "f" ]] && [[ "$val" != "t" ]]; then
    error "Test did not return t/f value: $fn"
  fi

  echo "$val"
}

apply() {
  local test_files

  # Find all test files under the migrations path and sort them
  test_files=$(find "$MIGRATIONS" -name $TEST_NAME | sort)

  # Iterate over the sorted list of test files (full path)
  for fn in $test_files
  do
    local dir
    dir=$(dirname "$fn")

    local val

    # Test if the schema needs migration
    val=$(test_sql "$fn") || { echo "$val"; exit 255; }

    if [[ "$val" = "f" ]]; then
      if [[ -n ${DRY:-} ]]; then
        verb "$OK_MSG (dry run) $dir"
      else
        if ! $PGCLIENT $PGARGS -v ON_ERROR_STOP=1 -f "$dir"/$APPLY_NAME; then
          error "Failed: $dir/$APPLY_NAME"
        else
          # Verify
          val=$(test_sql "$fn") || { echo "$val"; exit 255; }
          if [[ "$val" = "t" ]]; then
            verb "$OK_MSG $dir"
          else
            error "Failed verify: $dir"
          fi
        fi
      fi
    fi
  done
}

stat() {
  local test_files
  
  # Find all test files under the migrations path and sort them
  test_files=$(find "$MIGRATIONS" -name $TEST_NAME | sort)

  for fn in $test_files
  do
    local dir

    dir=$(dirname "$fn")

    local val
    val=$(test_sql "$fn") || { echo "$val"; exit 255; }
    if [[ -z ${STAT_INVERT:-} ]]; then
      [[ "$val" = "t" ]] && echo "$dir" 
    else
      [[ "$val" = "f" ]] && echo "$dir"
    fi
  done
}

process_opts() {
  local OPTIND
  while getopts "d:inq" opt
  do
    case $opt in
      i) STAT_INVERT=1 ;;
      n) DRY=1 ;;
      q) QUIET=1 ;;
      *) usage ;;
    esac
  done
}

if [[ $# -eq 0 ]]; then
  usage
else
  case $1 in
    apply)
      MIGRATIONS=${2:-}
      shift; shift
      process_opts "$@"
      check_path
      sanity_check 1
      apply
      ;;

    stat)
      MIGRATIONS=${2:-}
      shift; shift
      process_opts "$@"
      check_path
      sanity_check 1
      stat
      ;;

    list)
      MIGRATIONS=${2:-}
      check_path
      find "$MIGRATIONS" -name $TEST_NAME | sort | sed 's/test.sql$//'
      ;;

    check)
      sanity_check
      exit 0
      ;;

    help) 
      usage 
      ;;

    docs)
      docs
      ;;

    *) 
      error "Invalid command: $1\nRun '$0 help' for help."
      ;;
  esac
fi

exit 0

# DOCS BEGIN
# $(basename $0)
# 
# NAME
#     $(basename $0) -- SQL Migration Tool
#
# SYNOPSIS
#     $(basename $0) <command> <path> [options]
#
# DESCRIPTION
#     The $0 utility is a version and schema agnostic tool for database
#     migrations. 
#
# DETAILS
#     This tool traverses the specified migrations tree and applies all
#     eligible migrations to the connected database. The migrations tree can be
#     any path in the current file system, set with the path parameter. A
#     qualified migration is a directory that contains these two files:
#     $APPLY_NAME and $TEST_NAME. The $TEST_NAME file determines whether the
#     migration should be applied or not, and the $APPLY_NAME includes the
#     actual migration.
#     
# FILES
#    There are two special files that play into the schema migration:
#
#     * $TEST_NAME must be present inside each migration directory. It is a
#     plain SQL file, which *must* return a single column named 'test' with a
#     boolean value of 't' or 'f'. True value means migration is required, and
#     false if no migration is necessary. An example SQL for testing if a
#     username 'jack' is present would be:
#
#     SELECT COUNT(*) > 0 AS test 
#     FROM users 
#     WHERE username = 'jack';
#
#     The return value of 't' or 'f' can be thought of as answering the the
#     question 'Has the migration defined in $APPLY_NAME been successfully
#     applied, yes or no?'
#
#     * $APPLY_NAME must also be present inside each migration directory. It's a
#     plain SQL file that contains the actual migration. In the example
#     above, this would be:
#     
#     INSERT INTO users (username) VALUES ('jack');
#
# EXAMPLE MIGRATION TREE
#
#     migrations/
#       ├── 001_add_data
#       │   ├── $TEST_NAME
#       │   └── $APPLY_NAME
#       ├── 002_new_column
#       │   ├── $TEST_NAME
#       │   └── $APPLY_NAME
#       ├── 003_remove_column
#       │   ├── $TEST_NAME
#       │   └── $APPLY_NAME
#
# CREATING MIGRATIONS
#     Migrations are simple directories and can be created manually. All
#     migrations will be applied in alphabetical order, so name them
#     accordingly. 
#
# RUNNING MIGRATIONS
#     Migrations are applied with the 'apply' command and a mandatory parameter
#     with the migration path. You may run the topmost migration level or any
#     sub-levels as necessary.
#
# ENV VARIABLES
#     This tool uses the following optional env variables:
#
#     * PGCLIENT - full path of the Postgres client. By default, this script
#     will attempt to locate Postgres; however, if that's not possible, it will
#     return an error.
#
#     * PGARGS - command line arguments to pass to the Postgres client. This
#     will vary from one environment to the next.
#
#     Upon start-up, this tool will attempt to validate the Postgres
#     connection, so you must ensure that you have sane values for the above
#     variables.
#
